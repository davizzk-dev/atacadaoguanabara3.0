import { NextRequest, NextResponse } from 'next/server'
import { saveProductToFile, updateProductInFile, deleteProductFromFile, getAllProductsFromFile, products as defaultProducts, syncProductsToFile } from '@/lib/data'
import { withAPIProtection } from '@/lib/auth-middleware'

// Fun√ß√£o wrapper para capturar erros
const handleApiError = (error: any, operation: string) => {
  console.error(`‚ùå Erro em ${operation}:`, error)
  
  // Se for um erro de sistema de arquivos, retornar erro espec√≠fico
  if (error.code === 'ENOENT') {
    return NextResponse.json({
      error: 'Arquivo de produtos n√£o encontrado',
      details: 'O sistema n√£o conseguiu acessar o arquivo de produtos',
      success: false
    }, { status: 500 })
  }
  
  if (error.code === 'EACCES') {
    return NextResponse.json({
      error: 'Permiss√£o negada para acessar arquivo de produtos',
      details: 'O sistema n√£o tem permiss√£o para ler/escrever o arquivo',
      success: false
    }, { status: 500 })
  }
  
  return NextResponse.json({
    error: `Erro interno do servidor em ${operation}`,
    details: error instanceof Error ? error.message : 'Erro desconhecido',
    success: false
  }, { status: 500 })
}

async function handleGET() {
  try {
    console.log('üîç Buscando produtos...')
    let products = await getAllProductsFromFile()
    
    // Se n√£o h√° produtos no arquivo, usar os produtos padr√£o do data.ts
    if (!products || products.length === 0) {
      console.log('üì¶ Nenhum produto encontrado no arquivo, usando produtos padr√£o')
      products = defaultProducts.map(product => ({
        ...product,
        inStock: product.stock > 0,
        rating: product.rating || 0,
        reviews: product.reviews || 0
      }))
      
      // Sincronizar produtos padr√£o para o arquivo
      try {
        await syncProductsToFile()
      } catch (syncError) {
        console.error('‚ö†Ô∏è Erro ao sincronizar produtos, mas continuando...', syncError)
      }
    }
    
    console.log(`‚úÖ ${products.length} produtos carregados com sucesso`)
    return NextResponse.json(products)
  } catch (error) {
    return handleApiError(error, 'buscar produtos')
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üìù Recebendo requisi√ß√£o para criar produto...')
    
    // Verificar se o corpo da requisi√ß√£o est√° vazio
    const contentType = request.headers.get('content-type')
    if (!contentType || !contentType.includes('application/json')) {
      return NextResponse.json({
        error: 'Content-Type deve ser application/json',
        success: false
      }, { status: 400 })
    }
    
    let productData
    try {
      const text = await request.text()
      productData = text ? JSON.parse(text) : {}
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError)
      return NextResponse.json({
        error: 'Dados JSON inv√°lidos',
        details: 'O corpo da requisi√ß√£o deve ser um JSON v√°lido',
        success: false
      }, { status: 400 })
    }
    
    console.log('üì¶ Dados do produto recebidos:', productData)
    
    // Validar dados obrigat√≥rios
    if (!productData.name || !productData.price || !productData.category) {
      console.log('‚ùå Dados obrigat√≥rios faltando:', { 
        name: !!productData.name, 
        price: !!productData.price, 
        category: !!productData.category 
      })
      return NextResponse.json({
        error: 'Nome, pre√ßo e categoria s√£o obrigat√≥rios',
        success: false
      }, { status: 400 })
    }
    
    console.log('üíæ Salvando produto no arquivo...')
    const result = await saveProductToFile(productData)
    console.log('üìä Resultado do salvamento:', result)
    
    if (result.success) {
      console.log('‚úÖ Produto criado com sucesso')
      const response = NextResponse.json({
        message: result.message,
        product: productData,
        success: true
      })
      
      response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate')
      response.headers.set('Pragma', 'no-cache')
      
      return response
    } else {
      console.log('‚ùå Erro ao salvar produto:', result.message)
      return NextResponse.json({
        error: result.message,
        success: false
      }, { status: 400 })
    }
  } catch (error) {
    return handleApiError(error, 'criar produto')
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log('üîÑ Recebendo requisi√ß√£o para atualizar produto...')
    
    // Verificar se o corpo da requisi√ß√£o est√° vazio
    const contentType = request.headers.get('content-type')
    if (!contentType || !contentType.includes('application/json')) {
      return NextResponse.json({
        error: 'Content-Type deve ser application/json',
        success: false
      }, { status: 400 })
    }
    
    let productData
    try {
      const text = await request.text()
      productData = text ? JSON.parse(text) : {}
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError)
      return NextResponse.json({
        error: 'Dados JSON inv√°lidos',
        details: 'O corpo da requisi√ß√£o deve ser um JSON v√°lido',
        success: false
      }, { status: 400 })
    }
    
    console.log('üì¶ Dados do produto para atualiza√ß√£o:', productData)
    
    if (!productData.id) {
      console.log('‚ùå ID do produto n√£o fornecido')
      return NextResponse.json({
        error: 'ID do produto √© obrigat√≥rio',
        success: false
      }, { status: 400 })
    }
    
    console.log('üíæ Atualizando produto no arquivo...')
    const result = await updateProductInFile(productData.id, productData)
    console.log('üìä Resultado da atualiza√ß√£o:', result)
    
    if (result.success) {
      console.log('‚úÖ Produto atualizado com sucesso')
      const response = NextResponse.json({
        message: result.message,
        product: productData,
        success: true
      })
      
      response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate')
      response.headers.set('Pragma', 'no-cache')
      
      return response
    } else {
      console.log('‚ùå Erro ao atualizar produto:', result.message)
      return NextResponse.json({
        error: result.message,
        success: false
      }, { status: 404 })
    }
  } catch (error) {
    return handleApiError(error, 'atualizar produto')
  }
}

async function handleDELETE(request: NextRequest) {
  try {
    console.log('üóëÔ∏è Recebendo requisi√ß√£o para deletar produto...')
    const { searchParams } = new URL(request.url)
    const id = searchParams.get('id')
    console.log('üÜî ID do produto para deletar:', id)
    
    if (!id) {
      console.log('‚ùå ID do produto n√£o fornecido')
      return NextResponse.json({
        error: 'ID do produto √© obrigat√≥rio',
        success: false
      }, { status: 400 })
    }
    
    console.log('üíæ Deletando produto do arquivo...')
    const result = await deleteProductFromFile(id)
    console.log('üìä Resultado da exclus√£o:', result)
    
    if (result.success) {
      console.log('‚úÖ Produto deletado com sucesso')
      return NextResponse.json({
        message: result.message,
        success: true
      })
    } else {
      console.log('‚ùå Erro ao deletar produto:', result.message)
      return NextResponse.json({
        error: result.message,
        success: false
      }, { status: 404 })
    }
  } catch (error) {
    return handleApiError(error, 'deletar produto')
  }
}

// Aplicar prote√ß√£o apenas no GET (para impedir visualiza√ß√£o direta via URL)
// Manter POST, PUT, DELETE sem prote√ß√£o para funcionamento normal do sistema
export const GET = withAPIProtection(handleGET)
export const DELETE = handleDELETE 